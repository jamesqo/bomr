#!/bin/bash

function help {
    echo 'bomr is a tool that purges UTF-8 BOMs from your files.'
    echo
    echo 'Usage: bomr [-e|--exclude pattern] [-r|--recurse] files [directories]'
    echo
    echo 'exclude: Exclude files whose full name matches [pattern].'
    echo '[pattern] is interpreted as an extended regexp.'
    echo
    echo 'recurse: Allows [directories] to be specified.'
    echo 'Recursively removes the BOM for each file in [directories].'
}

function error {
    echo "$@" 1>&2
}

function include-file {
    # Test if the file matches an exclude
    for pattern in "${exclude[@]}"
    do
        # $pattern is read as extended regexp
        if [[ $1 =~ $pattern ]]; then
            return 1 # 1 -eq false in Bash
        fi
    done
}

function has-bom {
    # Test if the file starts with 0xEF, 0xBB, and 0xBF
    head -c 3 "$1" | grep -q $'\xef\xbb\xbf'
}

function purge-file {
    # Where the real work starts
    if include-file "$1" && has-bom "$1"; then
        # Don't pipe since we may 'clobber' the file with concurrent read/writes
        string=$(tail -c +4 "$1")
        echo "$string" > "$1"
    fi
}

function purge-directory {
    find "$1" -type f -print0 | while read -d '' f
    do
        purge-file "$f"
    done
}

targets=() # Empty array
exclude=()
recurse='false'

# At least one argument is required
if [ $# -eq 0 ]; then
    help 1>&2
    exit 4
fi

# Get options
while [ $# -gt 0 ]
do
    case "$1" in
        '-?'|-h|--help) # ? matches a single character by default, we don't want this behavior
        help
        exit 0
        ;;
        -e|--exclude)
        exclude+=("$2")
        shift
        ;;
        -r|--recurse)
        recurse='true'
        ;;
        --) # Stop parsing
        shift
        targets="$@"
        break # From outer loop
        ;;
        *)
        targets+=("$1") # List.Add()
        ;;
    esac
    shift
done

# Verify everything exists
for item in "${targets[@]}"
do
    if [ ! -e "$item" ]; then
        error "Error: $item does not exist!"
        exit 1
    fi
done

if [ $recurse = 'false' ]; then
    # We only let people specify directories if $recurse is true.
    # Validate that all arguments are files before we do any damage.
    for item in "${targets[@]}"
    do
        if [ ! -f "$item" ]; then
            error "Error: $item is not a file."
            error 'To remove the BOMs of all the files in a directory, specify the --recurse flag.'
            exit 2
        fi
    done

    # Do it!
    for file in "${targets[@]}"
    do
        purge-file "$file"
    done
else # $recurse = 'true'
    for item in "${targets[@]}"
    do
        if [ -d "$item" ]; then
            purge-directory "$item"
        elif [ -f "$item" ]; then
            purge-file "$item"
        else # Edge cases like /dev/null
            error "Error: $item is not a file or a directory!"
            exit 3
        fi
    done
fi
